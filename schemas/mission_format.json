{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://rustchain.dev/schemas/mission-format/v1.0",
  "title": "RustChain Mission Format",
  "description": "JSON Schema for validating RustChain mission YAML files",
  "type": "object",
  "required": ["version", "name", "steps"],
  "additionalProperties": false,
  
  "properties": {
    "version": {
      "type": "string",
      "description": "Mission format version",
      "pattern": "^\\d+\\.\\d+$",
      "examples": ["1.0", "2.0"]
    },
    
    "name": {
      "type": "string",
      "description": "Human-readable mission name",
      "minLength": 1,
      "maxLength": 255,
      "examples": ["File Processing Pipeline", "Data Validation Mission"]
    },
    
    "description": {
      "type": "string",
      "description": "Optional mission description",
      "maxLength": 1000
    },
    
    "steps": {
      "type": "array",
      "description": "Ordered list of mission steps",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/MissionStep"
      }
    },
    
    "config": {
      "$ref": "#/$defs/MissionConfig",
      "description": "Optional mission-level configuration"
    }
  },
  
  "$defs": {
    "MissionStep": {
      "type": "object",
      "description": "Individual step definition within a mission",
      "required": ["id", "name", "step_type", "parameters"],
      "additionalProperties": false,
      
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique step identifier",
          "pattern": "^[a-zA-Z][a-zA-Z0-9_-]*$",
          "minLength": 1,
          "maxLength": 100,
          "examples": ["fetch_data", "process_json", "step_1"]
        },
        
        "name": {
          "type": "string",
          "description": "Human-readable step name",
          "minLength": 1,
          "maxLength": 255,
          "examples": ["Fetch Data from API", "Process JSON Response"]
        },
        
        "step_type": {
          "$ref": "#/$defs/StepType",
          "description": "Type of operation to perform"
        },
        
        "depends_on": {
          "type": "array",
          "description": "List of step IDs this step depends on",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_-]*$"
          },
          "uniqueItems": true
        },
        
        "timeout_seconds": {
          "type": "integer",
          "description": "Maximum execution time in seconds",
          "minimum": 1,
          "maximum": 86400,
          "default": 300
        },
        
        "continue_on_error": {
          "type": "boolean",
          "description": "Whether to continue mission on step failure",
          "default": false
        },
        
        "parameters": {
          "type": "object",
          "description": "Step-specific parameters (varies by step_type)",
          "additionalProperties": true
        }
      }
    },
    
    "MissionConfig": {
      "type": "object",
      "description": "Mission-level configuration options",
      "additionalProperties": false,
      
      "properties": {
        "max_parallel_steps": {
          "type": "integer",
          "description": "Maximum steps to execute in parallel",
          "minimum": 1,
          "maximum": 100,
          "default": 4
        },
        
        "timeout_seconds": {
          "type": "integer",
          "description": "Overall mission timeout",
          "minimum": 1,
          "maximum": 86400,
          "default": 3600
        },
        
        "retry_count": {
          "type": "integer",
          "description": "Number of retries for failed steps",
          "minimum": 0,
          "maximum": 10,
          "default": 0
        },
        
        "variables": {
          "type": "object",
          "description": "Mission-level variables",
          "additionalProperties": {
            "oneOf": [
              {"type": "string"},
              {"type": "number"},
              {"type": "boolean"},
              {"type": "null"}
            ]
          }
        }
      }
    },
    
    "StepType": {
      "type": "string",
      "description": "Available step types for mission execution",
      "enum": [
        "create_file",
        "edit_file", 
        "delete_file",
        "copy_file",
        "move_file",
        "read_file",
        "list_directory",
        "file_search",
        "parse_json",
        "parse_yaml",
        "parse_xml",
        "validate_schema",
        "csv_process",
        "compile_code",
        "run_tests",
        "format_code",
        "lint_code",
        "extract_functions",
        "generate_docs",
        "git_commit",
        "git_branch",
        "git_merge",
        "git_status",
        "git_diff",
        "process_start",
        "process_kill",
        "monitor_resources",
        "service_health",
        "compress",
        "sql_query",
        "redis_set",
        "redis_get",
        "db_backup",
        "db_migrate",
        "websocket_connect",
        "ftp_upload",
        "ftp_download",
        "ssh_execute",
        "ping_host",
        "generate_embedding",
        "run_inference",
        "train_model",
        "classify_text",
        "http_request",
        "http_server",
        "llm_chat",
        "llm_completion",
        "agent_reasoning",
        "chain_execute",
        "tool_call",
        "command",
        "sleep",
        "log_message"
      ]
    }
  },
  
  "examples": [
    {
      "version": "1.0",
      "name": "Basic File Operations",
      "description": "Create and process a test file",
      "steps": [
        {
          "id": "create_test_file",
          "name": "Create Test File",
          "step_type": "create_file",
          "parameters": {
            "path": "/tmp/test.txt",
            "content": "Hello, RustChain!",
            "permissions": "644"
          }
        },
        {
          "id": "read_test_file",
          "name": "Read Test File",
          "step_type": "read_file",
          "depends_on": ["create_test_file"],
          "parameters": {
            "path": "/tmp/test.txt"
          }
        }
      ],
      "config": {
        "max_parallel_steps": 2,
        "timeout_seconds": 600
      }
    }
  ]
}