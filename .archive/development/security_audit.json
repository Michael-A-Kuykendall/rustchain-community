{"database":{"advisory-count":818,"last-commit":"3fbd1d0e5054bf36f8789a023d446ba44d98b044","last-updated":"2025-09-15T16:42:32+02:00"},"lockfile":{"dependency-count":523},"settings":{"target_arch":[],"target_os":[],"severity":null,"ignore":[],"informational_warnings":["unmaintained","unsound","notice"]},"vulnerabilities":{"found":true,"count":7,"list":[{"advisory":{"id":"RUSTSEC-2020-0159","package":"chrono","title":"Potential segfault in `localtime_r` invocations","description":"### Impact\n\nUnix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.\n\n### Workarounds\n\nNo workarounds are known.\n\n### References\n\n- [time-rs/time#293](https://github.com/time-rs/time/issues/293)","date":"2020-11-10","aliases":[],"related":["CVE-2020-26235","RUSTSEC-2020-0071"],"collection":"crates","categories":["code-execution","memory-corruption"],"keywords":["segfault"],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/chronotope/chrono/issues/499","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=0.4.20"],"unaffected":[]},"affected":null,"package":{"name":"chrono","version":"0.2.25","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"9213f7cd7c27e95c2b57c49f0e69b1ea65b27138da84a170133fd21b07659c00","dependencies":[{"name":"num","version":"0.1.43","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"time","version":"0.1.45","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2022-0013","package":"regex","title":"Regexes with large repetitions on empty sub-expressions take a very long time to parse","description":"The Rust Security Response WG was notified that the `regex` crate did not\nproperly limit the complexity of the regular expressions (regex) it parses. An\nattacker could use this security issue to perform a denial of service, by\nsending a specially crafted regex to a service accepting untrusted regexes. No\nknown vulnerability is present when parsing untrusted input with trusted\nregexes.\n\nThis issue has been assigned CVE-2022-24713. The severity of this vulnerability\nis \"high\" when the `regex` crate is used to parse untrusted regexes. Other uses\nof the `regex` crate are not affected by this vulnerability.\n\n## Overview\n\nThe `regex` crate features built-in mitigations to prevent denial of service\nattacks caused by untrusted regexes, or untrusted input matched by trusted\nregexes. Those (tunable) mitigations already provide sane defaults to prevent\nattacks. This guarantee is documented and it's considered part of the crate's\nAPI.\n\nUnfortunately a bug was discovered in the mitigations designed to prevent\nuntrusted regexes to take an arbitrary amount of time during parsing, and it's\npossible to craft regexes that bypass such mitigations. This makes it possible\nto perform denial of service attacks by sending specially crafted regexes to\nservices accepting user-controlled, untrusted regexes.\n\n## Affected versions\n\nAll versions of the `regex` crate before or equal to 1.5.4 are affected by this\nissue. The fix is include starting from  `regex` 1.5.5.\n\n## Mitigations\n\nWe recommend everyone accepting user-controlled regexes to upgrade immediately\nto the latest version of the `regex` crate.\n\nUnfortunately there is no fixed set of problematic regexes, as there are\npractically infinite regexes that could be crafted to exploit this\nvulnerability. Because of this, we do not recommend denying known problematic\nregexes.\n\n## Acknowledgements\n\nWe want to thank Addison Crump for responsibly disclosing this to us according\nto the [Rust security policy][1], and for helping review the fix.\n\nWe also want to thank Andrew Gallant for developing the fix, and Pietro Albini\nfor coordinating the disclosure and writing this advisory.\n\n[1]: https://www.rust-lang.org/policies/security","date":"2022-03-08","aliases":["CVE-2022-24713","GHSA-m5pq-gvj9-9vr8"],"related":[],"collection":"crates","categories":["denial-of-service"],"keywords":[],"cvss":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H","informational":null,"references":[],"source":null,"url":"https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=1.5.5"],"unaffected":[]},"affected":null,"package":{"name":"regex","version":"0.1.80","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f","dependencies":[{"name":"aho-corasick","version":"0.5.3","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"memchr","version":"0.1.11","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"regex-syntax","version":"0.3.9","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"thread_local","version":"0.2.7","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"utf8-ranges","version":"0.1.3","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2023-0071","package":"rsa","title":"Marvin Attack: potential key recovery through timing sidechannels","description":"### Impact\nDue to a non-constant-time implementation, information about the private key is leaked through timing information which is observable over the network. An attacker may be able to use that information to recover the key.\n\n### Patches\nNo patch is yet available, however work is underway to migrate to a fully constant-time implementation.\n\n### Workarounds\nThe only currently available workaround is to avoid using the `rsa` crate in settings where attackers are able to observe timing information, e.g. local use on a non-compromised computer is fine.\n\n### References\nThis vulnerability was discovered as part of the \"[Marvin Attack]\", which revealed several implementations of RSA including OpenSSL had not properly mitigated timing sidechannel attacks.\n\n[Marvin Attack]: https://people.redhat.com/~hkario/marvin/","date":"2023-11-22","aliases":["CVE-2023-49092","GHSA-c38w-74pg-36hr","GHSA-4grx-2x9w-596c"],"related":[],"collection":"crates","categories":["crypto-failure"],"keywords":["cryptography"],"cvss":"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N","informational":null,"references":["https://people.redhat.com/~hkario/marvin/"],"source":null,"url":"https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[],"unaffected":[]},"affected":null,"package":{"name":"rsa","version":"0.9.8","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"78928ac1ed176a5ca1d17e578a1825f3d81ca54cf41053a592584b020cfd691b","dependencies":[{"name":"const-oid","version":"0.9.6","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"digest","version":"0.10.7","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"num-bigint-dig","version":"0.8.4","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"num-integer","version":"0.1.46","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"num-traits","version":"0.2.19","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"pkcs1","version":"0.7.5","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"pkcs8","version":"0.10.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"rand_core","version":"0.6.4","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"signature","version":"2.2.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"spki","version":"0.7.3","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"subtle","version":"2.6.1","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"zeroize","version":"1.8.1","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2024-0363","package":"sqlx","title":"Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts","description":"The following presentation at this year's DEF CON was brought to our attention on the SQLx Discord:\n\n> SQL Injection isn't Dead: Smuggling Queries at the Protocol Level  \n> <http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn't%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf>  \n> (Archive link for posterity.)\n\nEssentially, encoding a value larger than 4GiB can cause the length prefix in the protocol to overflow, \ncausing the server to interpret the rest of the string as binary protocol commands or other data.\n\nIt appears SQLx _does_ perform truncating casts in a way that could be problematic, \nfor example: <https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163>\n\nThis code has existed essentially since the beginning, \nso it is reasonable to assume that all published versions `<= 0.8.0` are affected.\n\n## Mitigation\n\nAs always, you should make sure your application is validating untrustworthy user input. \nReject any input over 4 GiB, or any input that could _encode_ to a string longer than 4 GiB. \nDynamically built queries are also potentially problematic if it pushes the message size over this 4 GiB bound.\n\n[`Encode::size_hint()`](https://docs.rs/sqlx/latest/sqlx/trait.Encode.html#method.size_hint) \ncan be used for sanity checks, but do not assume that the size returned is accurate. \nFor example, the `Json<T>` and `Text<T>` adapters have no reasonable way to predict or estimate the final encoded size, \nso they just return `size_of::<T>()` instead.\n\nFor web application backends, consider adding some middleware that limits the size of request bodies by default.\n\n## Resolution\n\n`sqlx 0.8.1` has been released with the fix: <https://github.com/launchbadge/sqlx/blob/main/CHANGELOG.md#081---2024-08-23>\n\nPostgres users are advised to upgrade ASAP as a possible exploit has been demonstrated:\n<https://github.com/launchbadge/sqlx/issues/3440#issuecomment-2307956901>\n\nMySQL and SQLite do not _appear_ to be exploitable, but upgrading is recommended nonetheless.","date":"2024-08-15","aliases":[],"related":[],"collection":"crates","categories":["format-injection"],"keywords":["sql","injection","overflow","truncation"],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/launchbadge/sqlx/issues/3440","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=0.8.1"],"unaffected":[]},"affected":null,"package":{"name":"sqlx","version":"0.7.4","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"c9a2ccff1a000a5a59cd33da541d9f2fdcd9e6e8229cc200565942bff36d0aaa","dependencies":[{"name":"sqlx-core","version":"0.7.4","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"sqlx-macros","version":"0.7.4","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"sqlx-mysql","version":"0.7.4","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"sqlx-postgres","version":"0.7.4","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"sqlx-sqlite","version":"0.7.4","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2022-0006","package":"thread_local","title":"Data race in `Iter` and `IterMut`","description":"In the affected version of this crate, `{Iter, IterMut}::next` used a weaker memory ordering when loading values than what was required, exposing a potential data race\nwhen iterating over a `ThreadLocal`'s values.\n\nCrates using `Iter::next`, or `IterMut::next` are affected by this issue.","date":"2022-01-23","aliases":["GHSA-9hpw-r23r-xgm5"],"related":[],"collection":"crates","categories":["memory-corruption"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/Amanieu/thread_local-rs/issues/33","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=1.1.4"],"unaffected":[]},"affected":null,"package":{"name":"thread_local","version":"0.2.7","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5","dependencies":[{"name":"thread-id","version":"2.0.0","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2020-0071","package":"time","title":"Potential segfault in the time crate","description":"### Impact\n\nThe affected functions set environment variables without synchronization. On Unix-like operating systems, this can crash in multithreaded programs. Programs may segfault due to dereferencing a dangling pointer if an environment variable is read in a different thread than the affected functions. This may occur without the user's knowledge, notably in the Rust standard library or third-party libraries.\n\nThe affected functions from time 0.2.7 through 0.2.22 are:\n\n- `time::UtcOffset::local_offset_at`\n- `time::UtcOffset::try_local_offset_at`\n- `time::UtcOffset::current_local_offset`\n- `time::UtcOffset::try_current_local_offset`\n- `time::OffsetDateTime::now_local`\n- `time::OffsetDateTime::try_now_local`\n\nThe affected functions in time 0.1 (all versions) are:\n\n- `time::at_utc`\n- `time::at`\n- `time::now`\n- `time::tzset`\n\nNon-Unix targets (including Windows and wasm) are unaffected.\n\n### Patches\n\nPending a proper fix, the internal method that determines the local offset has been modified to always return `None` on the affected operating systems. This has the effect of returning an `Err` on the `try_*` methods and `UTC` on the non-`try_*` methods.\n\nUsers and library authors with time in their dependency tree should perform `cargo update`, which will pull in the updated, unaffected code.\n\nUsers of time 0.1 do not have a patch and should upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.\n\n### Workarounds\n\nA possible workaround for crates affected through the transitive dependency in `chrono`, is to avoid using the default `oldtime` feature dependency of the `chrono` crate by disabling its `default-features` and manually specifying the required features instead.\n\n#### Examples:\n\n`Cargo.toml`:  \n\n```toml\nchrono = { version = \"0.4\", default-features = false, features = [\"serde\"] }\n```\n\n```toml\nchrono = { version = \"0.4.22\", default-features = false, features = [\"clock\"] }\n```\n\nCommandline:  \n\n```bash\ncargo add chrono --no-default-features -F clock\n```\n\nSources:  \n - [chronotope/chrono#602 (comment)](https://github.com/chronotope/chrono/issues/602#issuecomment-1242149249)  \n - [vityafx/serde-aux#21](https://github.com/vityafx/serde-aux/issues/21)","date":"2020-11-18","aliases":["CVE-2020-26235","GHSA-wcg3-cvx6-7396"],"related":[],"collection":"crates","categories":["code-execution","memory-corruption"],"keywords":["segfault"],"cvss":"CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H","informational":null,"references":[],"source":null,"url":"https://github.com/time-rs/time/issues/293","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=0.2.23"],"unaffected":["=0.2.0","=0.2.1","=0.2.2","=0.2.3","=0.2.4","=0.2.5","=0.2.6"]},"affected":{"arch":[],"os":["linux","redox","solaris","android","ios","macos","netbsd","openbsd","freebsd"],"functions":{"time::OffsetDateTime::now_local":["<0.2.23"],"time::OffsetDateTime::try_now_local":["<0.2.23"],"time::UtcOffset::current_local_offset":["<0.2.23"],"time::UtcOffset::local_offset_at":["<0.2.23"],"time::UtcOffset::try_current_local_offset":["<0.2.23"],"time::UtcOffset::try_local_offset_at":["<0.2.23"],"time::at":["^0.1"],"time::at_utc":["^0.1"],"time::now":["^0.1"]}},"package":{"name":"time","version":"0.1.45","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"1b797afad3f312d1c66a56d11d0316f916356d11bd158fbc6ca6389ff6bf805a","dependencies":[{"name":"libc","version":"0.2.175","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"wasi","version":"0.10.0+wasi-snapshot-preview1","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"winapi","version":"0.3.9","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}},{"advisory":{"id":"RUSTSEC-2025-0055","package":"tracing-subscriber","title":"Logging user input may result in poisoning logs with ANSI escape sequences","description":"Previous versions of tracing-subscriber were vulnerable to ANSI escape sequence injection attacks. Untrusted user input containing ANSI escape sequences could be injected into terminal output when logged, potentially allowing attackers to:\n\n- Manipulate terminal title bars\n- Clear screens or modify terminal display\n- Potentially mislead users through terminal manipulation\n\nIn isolation, impact is minimal, however security issues have been found in terminal emulators that enabled an attacker to use ANSI escape sequences via logs to exploit vulnerabilities in the terminal emulator.\n\nThis was patched in [PR #3368](https://github.com/tokio-rs/tracing/pull/3368) to escape ANSI control characters from user input.","date":"2025-08-29","aliases":["CVE-2025-58160","GHSA-xwfj-jgwm-7wp5"],"related":[],"collection":"crates","categories":["format-injection"],"keywords":[],"cvss":null,"informational":null,"references":[],"source":null,"url":"https://github.com/advisories/GHSA-xwfj-jgwm-7wp5","withdrawn":null,"license":"CC0-1.0"},"versions":{"patched":[">=0.3.20"],"unaffected":[]},"affected":null,"package":{"name":"tracing-subscriber","version":"0.3.19","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008","dependencies":[{"name":"matchers","version":"0.1.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"nu-ansi-term","version":"0.46.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"once_cell","version":"1.21.3","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"regex","version":"1.11.2","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"serde","version":"1.0.219","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"serde_json","version":"1.0.143","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"sharded-slab","version":"0.1.7","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"smallvec","version":"1.15.1","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"thread_local","version":"1.1.9","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tracing","version":"0.1.41","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tracing-core","version":"0.1.34","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tracing-log","version":"0.2.0","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"tracing-serde","version":"0.2.0","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null}}]},"warnings":{"unmaintained":[{"kind":"unmaintained","package":{"name":"ftp","version":"3.0.1","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"542951aad0071952c27409e3bd7cb62d1a3ad419c4e7314106bf994e0083ad5d","dependencies":[{"name":"chrono","version":"0.2.25","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"lazy_static","version":"0.1.16","source":"registry+https://github.com/rust-lang/crates.io-index"},{"name":"regex","version":"0.1.80","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":{"id":"RUSTSEC-2023-0043","package":"ftp","title":"ftp is unmaintained, use suppaftp instead","description":"The [`ftp`](https://crates.io/crates/ftp) crate is not maintained any more;\nuse [`suppaftp`](https://crates.io/crates/suppaftp) instead.","date":"2023-02-20","aliases":[],"related":[],"collection":"crates","categories":[],"keywords":["ssl","wont-build"],"cvss":null,"informational":"unmaintained","references":["https://github.com/mattnenterprise/rust-ftp/issues/91","https://github.com/mattnenterprise/rust-ftp/issues/84"],"source":null,"url":"https://github.com/mattnenterprise/rust-ftp/pull/92","withdrawn":null,"license":"CC0-1.0"},"affected":null,"versions":{"patched":[],"unaffected":[]}},{"kind":"unmaintained","package":{"name":"fxhash","version":"0.2.1","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c","dependencies":[{"name":"byteorder","version":"1.5.0","source":"registry+https://github.com/rust-lang/crates.io-index"}],"replace":null},"advisory":{"id":"RUSTSEC-2025-0057","package":"fxhash","title":"fxhash - no longer maintained","description":"The fxhash crate is no longer maintained.\n\nThe repository is stale and owner is no longer active on GitHub.\n\nPlease take a look at [rustc-hash](https://github.com/rust-lang/rustc-hash) instead.\n```","date":"2025-09-05","aliases":[],"related":[],"collection":"crates","categories":[],"keywords":[],"cvss":null,"informational":"unmaintained","references":[],"source":null,"url":"https://github.com/cbreeden/fxhash/issues/20","withdrawn":null,"license":"CC0-1.0"},"affected":null,"versions":{"patched":[],"unaffected":[]}},{"kind":"unmaintained","package":{"name":"paste","version":"1.0.15","source":"registry+https://github.com/rust-lang/crates.io-index","checksum":"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a","replace":null},"advisory":{"id":"RUSTSEC-2024-0436","package":"paste","title":"paste - no longer maintained","description":"The creator of the crate `paste` has stated in the [`README.md`](https://github.com/dtolnay/paste/blob/master/README.md) \nthat this project is not longer maintained as well as archived the repository\n\n## Possible Alternative(s)\n\n- [pastey](https://crates.io/crates/pastey), a fork of paste and is aimed to be a drop-in replacement with additional features for paste crate","date":"2024-10-07","aliases":[],"related":[],"collection":"crates","categories":[],"keywords":[],"cvss":null,"informational":"unmaintained","references":[],"source":null,"url":"https://github.com/dtolnay/paste","withdrawn":null,"license":"CC0-1.0"},"affected":null,"versions":{"patched":[],"unaffected":[]}}]}}