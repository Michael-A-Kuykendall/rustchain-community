{
  "permissions": {
    "allow": [
      "Bash(./punch.exe discover:*)",
      "Bash(../punch-discovery/punch.exe discover . --languages rust -o rustchain_community_current.json)",
      "Bash(../punch-discovery/punch.exe discover:*)",
      "Bash(./punch.exe --help)",
      "Bash(./punch.exe stats:*)",
      "Bash(punch discover:*)",
      "Bash(punch)",
      "Bash(go install:*)",
      "Bash(punch stats)",
      "Bash(cp:*)",
      "Bash(cargo check:*)",
      "Bash(mkdir:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(cargo build:*)",
      "Bash(cargo test:*)",
      "Bash(timeout 120 cargo check)",
      "Bash(cargo run:*)",
      "Bash(grep:*)",
      "Bash(for:*)",
      "Bash(then echo \"Fixing $file\")",
      "Bash(sed:*)",
      "Bash(fi)",
      "Bash(done)",
      "Bash(timeout 60 cargo check)",
      "Bash(cargo install:*)",
      "Bash(cargo tarpaulin:*)",
      "Bash(rg:*)",
      "Bash(cargo --version)",
      "Bash(rustc --version)",
      "Bash(curl:*)",
      "Bash(./rustchain.exe run test_llm_integration.yaml)",
      "Bash(./rustchain.exe mission validate test_llm_integration.yaml)",
      "Bash(./rustchain.exe mission validate:*)",
      "Bash(./rustchain.exe run test_ollama_direct.yaml)",
      "Bash(./rustchain.exe run test_multiple_llm_steps.yaml)",
      "Bash(./rustchain.exe run:*)",
      "Bash(./target/release/rustchain.exe mission validate:*)",
      "Bash(./target/release/rustchain.exe run missions/art_01_foundation.yaml)",
      "Bash(ollama list:*)",
      "Bash(touch:*)",
      "WebFetch(domain:csrc.nist.gov)",
      "WebSearch",
      "WebFetch(domain:github.com)",
      "Bash(rustc:*)",
      "Bash(./reality_check.exe)",
      "Bash(./simple_check.exe)",
      "WebFetch(domain:www.scrut.io)",
      "Bash(cargo init:*)",
      "Bash(powershell:*)",
      "Bash(build-release.cmd)",
      "Bash(cmd:*)",
      "Bash(copy targetreleasecomply.exe releasecomply-windows-x64.exe)",
      "Bash(./comply-windows-x64.exe --help)",
      "Bash(./release/comply-windows-x64.exe verify:*)",
      "Bash(cargo:*)",
      "Bash(./target/debug/rustchain.exe --features \"llm\" run test_llm_simple.yaml)",
      "Bash(./target/debug/rustchain.exe run:*)",
      "Bash(./target/debug/rustchain.exe mission validate:*)",
      "Bash(./target/release/rustchain.exe run test_llm_simple.yaml)",
      "Bash(where rustchain)",
      "Bash(git add:*)",
      "Bash(copy:*)",
      "Bash(RUST_LOG=debug cargo run --bin rustchain --features llm -- run test_var_substitution.yaml)",
      "Bash(RUST_LOG=debug cargo run --bin rustchain --features llm -- run test_complex_var.yaml)",
      "Bash(RUST_LOG=info rustchain run missions/test_coverage_shimmy_provider.yaml)",
      "Bash(timeout:*)",
      "Bash(RUST_LOG=debug rustchain run test_ollama_champion.yaml)",
      "Bash(RUST_LOG=info rustchain run missions/shimmy_provider_85_coverage.yaml)",
      "Bash(punch-test:*)",
      "WebFetch(domain:python.langchain.com)",
      "Bash(RUST_LOG=info cargo run --bin rustchain --features tools -- tools list)",
      "Bash(./punch-test.exe analyze:*)",
      "Bash(./punch-test.exe --help)",
      "Bash(./build/punch-test.exe:*)",
      "Bash(./punch.exe analyze --help)",
      "Bash(./punch.exe query:*)",
      "Bash(gh repo list:*)",
      "Bash(gh repo view:*)",
      "Bash(gh repo clone:*)",
      "Bash(cat:*)",
      "Bash(gh api:*)",
      "Bash(git clone:*)",
      "WebFetch(domain:docs.github.com)",
      "Bash(gh:*)",
      "Bash(git commit:*)",
      "Bash(git branch:*)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(jq:*)",
      "Bash(python:*)",
      "Bash(\"/c/Users/micha/miniconda3/python.exe\" create_coverage_registry.py)",
      "Bash(\"/c/Users/micha/miniconda3/python.exe\" create_enhanced_coverage_registry.py)",
      "Bash(\"/c/Users/micha/miniconda3/python.exe\" generate_coverage_missions.py)",
      "Bash(punch query:*)",
      "Bash(punch:*)",
      "Bash(do sed -i 's/depends_on: None,$/depends_on: None,\\n            continue_on_error: None,/g' \"$file\")",
      "Bash(true)",
      "Bash(echo:*)",
      "Bash(mv:*)",
      "Bash(do mv \"$f\" \"$f.bak\")",
      "Bash(RUST_BACKTRACE=1 cargo run --example error_handling_validation --no-default-features)",
      "Bash(./punch.exe quality:*)",
      "Bash(./punch.exe vulnerabilities --workspace=/c/Users/micha/repos/rustchain-community --output=table)",
      "Bash(./punch.exe go:*)",
      "Bash(ln:*)",
      "Bash(./test_tool_api)",
      "Bash(./test_server_api)",
      "Bash(./punch.exe analyze --workspace=/c/Users/micha/repos/rustchain-community --output=json)",
      "Bash(./target/release/rustchain.exe --version)",
      "Bash(time:*)",
      "Bash(./target/release/rustchain.exe features:*)",
      "Bash(./target/release/rustchain.exe --help)",
      "Bash(./punch.exe rust:*)",
      "Bash(./punch.exe analyze:*)",
      "Bash(./target/debug/rustchain.exe --help)",
      "Bash(./target/debug/rustchain.exe safety validate examples/01_hello_world_mission.yaml)",
      "Bash(do echo \"Run $i:\")",
      "Bash(./target/debug/rustchain.exe audit:*)",
      "Bash(./performance_benchmark.exe)",
      "Bash(npm install)",
      "Bash(npm audit:*)",
      "Bash(npm run dev:*)",
      "Bash(chmod:*)",
      "Bash(npm run build:*)",
      "Bash(npm run lint)",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "WebFetch(domain:media.discordapp.net)",
      "Bash(./setup-github-wiki.bat)",
      "Bash(RUST_BACKTRACE=1 cargo test validation::tests::test_mission_validator --lib -- --nocapture)",
      "Bash(RUST_BACKTRACE=1 cargo test --features transpiler validation::tests::test_mission_validator --lib -- --nocapture)",
      "Bash(RUST_BACKTRACE=1 cargo test --all-features test_parse_http_sensor --lib -- --nocapture)",
      "Bash(RUST_BACKTRACE=1 cargo test --all-features test_parse_simple_bash_dag --lib -- --nocapture)",
      "Bash(RUST_BACKTRACE=1 cargo test --all-features test_shimmy_provider_creation --lib -- --nocapture)",
      "Bash(PYTHONIOENCODING=utf-8 specify --help)",
      "Bash(PYTHONIOENCODING=utf-8 specify check)",
      "Bash(PYTHONIOENCODING=utf-8 specify init --help)",
      "Bash(PYTHONIOENCODING=utf-8 cat src/llm/mod.rs)",
      "Bash(PYTHONIOENCODING=utf-8 specify interface --source src/core/tools.rs --output specs/tool_framework.yaml --format yaml)",
      "Bash(export PYTHONIOENCODING=utf-8)",
      "Bash(specify:*)",
      "Bash(PYTHONIOENCODING=utf-8 specify interface src/llm/mod.rs --output=specs/llm_provider_interface.yaml --format=openapi)",
      "Bash(PYTHONIOENCODING=utf-8 specify init --here --ai claude)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(PYTHONIOENCODING=utf-8 uvx --from git+https://github.com/github/spec-kit.git specify init --here --ai claude)",
      "Bash(.specify/scripts/powershell/create-new-feature.ps1 -Json \"Mission Engine: DAG-based mission execution system that supports 12+ step types (CreateFile, Command, Http, Tool, LLM, Agent, Chain, etc.) with topological sorting, dependency resolution, policy validation, audit trails, and parallel execution capabilities. Handles error recovery (fail-fast or continue-on-error), variable substitution, and provides comprehensive logging for enterprise compliance. Located at src/engine/mod.rs and related files.\")",
      "Bash(PYTHONIOENCODING=utf-8 specify interface --source src/tools/mod.rs --output specs/tools/tool_framework_interface.yaml)",
      "Bash(PYTHONIOENCODING=utf-8 specify /specify)",
      "WebFetch(domain:www.standardcap.com)",
      "Bash(py:*)",
      "Bash(ein tool estimate-hours:*)",
      "Bash(git config:*)",
      "Bash(gix log:*)",
      "Bash(ein tool find:*)",
      "Bash(RUST_BACKTRACE=1 cargo test runtime::tests::test_execute_mission_empty_steps_panics -- --nocapture)",
      "Bash(./target/release/rustchain.exe transpile:*)",
      "Bash(./target/release/rustchain.exe benchmark:*)",
      "Bash(pip install:*)",
      "Bash(where python)",
      "Bash(git log:*)",
      "Bash(git grep:*)",
      "Bash(git fetch:*)",
      "Bash(bun install:*)",
      "Bash(where bun)",
      "Bash(git remote get-url:*)",
      "Bash(convert:*)",
      "Bash(magick:*)",
      "Bash(git init:*)",
      "Bash(git checkout:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "C:\\Users\\micha\\repos\\punch-discovery",
      "C:\\Users\\micha\\repos",
      "C:\\c\\Users\\micha\\repos\\rustchain-community",
      "C:\\c\\Users\\micha\\repos",
      "C:\\Users\\micha",
      "C:\\c\\Users\\micha"
    ]
  }
}