name: "PUNCH Auto-Updater System Complete Design"
description: "Generate comprehensive auto-updater architecture using working simple pattern"
version: "1.0"

steps:
  - id: "create_updater_architecture"
    name: "Design PUNCH auto-updater system architecture"
    step_type: "llm"
    parameters:
      provider: "ollama"
      model: "llama32-champion:latest"
      prompt: |
        Design comprehensive PUNCH Auto-Updater System architecture based on user requirements.
        
        User's Complete Requirements:
        1. **Hub and Spoke Architecture**: Central update server coordinating all PUNCH family tools
        2. **Tool Dependency Registry**: Track all external dependencies for each family tool
        3. **Change Detection System**: Monitor GitHub repos, package registries for updates
        4. **Dual Mission System**: Fire two RustChain missions when changes detected:
           - Maintenance Mission: Handle security updates, compatibility fixes
           - Feature Detection Mission: Identify new capabilities and integration opportunities
        5. **GitHub PR Automation**: Generate PRs for user approval of updates
        6. **Versioning Strategy**: Proper semantic versioning with update channels
        7. **Monetization Strategy**: Update service as premium feature with subscription tiers
        8. **Industry Standards**: Use Renovate/Dependabot patterns but custom where beneficial
        
        PUNCH Family Tools to Support:
        - PUNCH-SYSTEMS (Rust/Go/C++/Zig) - 15MB binary
        - PUNCH-WEB (JS/TS/React/Vue) - 18MB binary  
        - PUNCH-DATA (Python/R/SQL/ML) - 20MB binary
        - PUNCH-ENTERPRISE (Java/C#/.NET) - 22MB binary
        - PUNCH Master (All families) - 75MB binary
        
        Design Requirements:
        1. **Architecture Pattern**: Hub/spoke vs alternatives analysis
        2. **Dependency Tracking**: Registry design for each tool's external dependencies
        3. **Change Detection**: GitHub API, npm/cargo/pypi/maven monitoring
        4. **Update Pipeline**: RustChain mission automation for maintenance + feature detection
        5. **PR Automation**: GitHub integration with approval workflow
        6. **Security**: Software supply chain security, SBOM generation
        7. **Scalability**: Handle hundreds of dependencies across all tool families
        8. **Reliability**: Rollback mechanisms, staged deployment
        9. **Monetization**: Update service pricing strategy
        10. **User Experience**: Minimal disruption, clear communication
        
        Provide detailed implementation architecture including:
        - System architecture diagrams (text-based)
        - Component specifications
        - API design for update coordination
        - RustChain mission templates for dual update system
        - GitHub integration strategy
        - Business model for update service monetization
        - Implementation timeline and resource requirements
        
        Focus on enterprise-grade reliability with practical implementation steps.
        Keep response comprehensive but structured for immediate implementation.
      temperature: 0.1
      max_tokens: 2000

  - id: "save_updater_design"
    name: "Save complete auto-updater design to file"
    step_type: "create_file"
    parameters:
      path: "PUNCH_AUTO_UPDATER_COMPLETE_DESIGN.md"
      content: |
        # PUNCH Auto-Updater System - Complete Architecture Design
        
        Generated by Champion Model (Llama-3.2-1B Personal)
        Generation Date: 2025-08-31
        
        ## Executive Summary
        This document provides comprehensive architecture design for the PUNCH Family Auto-Updater System based on detailed requirements analysis and industry best practices research.
        
        ## Complete Architecture Design
        
        The comprehensive design will be populated by the Champion model's analysis of all requirements, architecture patterns, and implementation strategies for the PUNCH auto-updater system.
        
        ## Implementation Status
        Ready for development with detailed specifications and RustChain mission templates.

dependencies:
  - from: "create_updater_architecture"
    to: "save_updater_design"